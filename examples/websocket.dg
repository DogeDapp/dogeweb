import '/os'
import '/itertools'

import '/dogeweb'
import '/dogeweb/r'
import '/dogeweb/property'
import '/dogeweb/websocket'


app = dogeweb.app $ r.path
  '/', r.get $ r.upgrade
    # `r.upgrade` routes between protocols.
    # If the client does not want to change protocols, it will use `http`.
    'http', ~> @static attachment: False $ os.path.join (os.path.dirname __file__) 'websocket.html'

    # `websocket.endpoint` adds a new argument to the handler, which is a WebSocket connection.
    'websocket', dogeweb.websocket.endpoint $ ch clients: set! monotonic: itertools.count! ~>
      id = str $ next monotonic
      # `ch.close [code] [message]` gracefully ends the connection;
      # `ch.send <bytes>` transfers some binary data;
      # `ch.send <string>` transfers Unicode text.
      # None of them wait for the write buffer to be flushed, so they're synchronous.
      for w in clients => w.send $ 'S ' + id + ' connected'
      clients.add ch

      except
        # The channel is also an async iterator of messages, which are
        # byte strings or unicode strings, mirroring `send`.
        err => async for msg in ch =>
          msg :: str => for w in clients => w.send $ 'M ' + id + ' ' + msg
        finally =>
          clients.remove ch
          for w in clients => w.send $ 'S ' + id + ' disconnected'


app.run '0.0.0.0' 8000
