import '/os'
import '/asyncio'
import '/posixpath/normpath'

import '/dogeweb'
import '/dogeweb/r'
# Normally, all handlers are `request -> response` functions.
# Importing `property` into the namespace allows to use `~> response` properties
# instead; the request is passed as `self` (aka `@`.)
import '/dogeweb/property'


app = dogeweb.app $ r.dir
  # `r.dir` is intended to route between submodules. For example, suppose you have
  # a handler named `my_handler`. You find an app that provides its own handler
  # `yobaapp.handler`, and decide that you MUST HAVE IT ON YOUR SERVER THIS INSTANT.
  # So you calm down a bit then write
  #
  #    my_handler = r.dir
  #      '/yobaapp/', yobaapp.handler
  #      '/', my_handler
  #
  # Instant 2X APPLICATION COMBO!
  #
  '/request/', r.path
    # `r.path` routes between subpaths relative to the current module.
    # `r.get` returns an error if the request is not `GET`.
    '/method/', r.get $ ~> '{}\n'.format @method
    '/path/',   r.get $ ~> '{}\n'.format @path
    # Paths may contain wildcards; `<str:something>`, for example, would
    # match any string that does not contain slashes and pass it as a keyword
    # argument "something" to the handler. See `dogeweb.route.wildcards` for available
    # types.
    '/attr/<str:name>/', r.get $ name ~> '{}\n'.format $ getattr self name None
    # `r.method` is another router; it should be rather straightforward.
    '/payload/', r.method
      'GET',  ~> 'POST something here.\n'
      'POST', ~> '{}\n'.format @payload

  # Each route is a function that accepts a request as its first argument
  # and returns a response. In dg, `~> x` creates a property instead;
  # that's acceptable, too.
  '/static/', r.get $ ~>
    # The only requirement for `r.dir` is that the requested path starts with
    # the specified directory. The rest of the path can be anything.
    # (NOTE: it can even contain stuff like `..`, so normalize it first.
    # It always starts with `/`, so you can't go higher than that at least.)
    # The attribute `path` of a request contains the path *relative to the module*,
    # while `parent` is the path to the module itself.
    @static $ os.path.join (os.path.dirname __file__) $ (normpath @path).lstrip '/'

  # Decorators can be applied in any order; for example, all paths in this directory
  # accept GET only, so we do `r.get` first, unlike in `/request/`.
  '/route/', 'test_route', r.get $ r.path
    # Normally, each argument to `r.dir` or `r.path` is a 2-tuple `(path, handler)`.
    # There is an optional second item, though, which specifies the name for this route.
    '/parent/', 'parent', ~> '{}\n'.format @parent
    # This name can be used to generate URLs; e.g. in order to create a link
    # from `test_route.redirect` to `test_route.parent` (which is "/route/parent/" here)
    # one would write `request.url_for ".parent"` instead of hardcoding the URL:
    '/redirect/', 'redirect', ~> @redirect $ @url_for '.parent'
    # Keyword arguments to `url_for` specify the values to substitute for wildcards.
    '/<int:id>/', 'something', id ~> 'Got item #{}.\n'.format id
    '/first/',    'to_id_1',      ~> @redirect $ @url_for '.something' id: 1

  '/', r.get $ r.path
    '/',             ~> 'This is the root page.'
    '/favicon.ico',  ~> @redirect '/static/favicon.ico'
    '/async/sleep/', ~>
      # A handler can be an asyncio coroutine, too.
      # It's not necessary to use the decorator, though; a generator
      # is still a generator.
      await asyncio.sleep 5 loop: @loop
      # Acceptable return values are strings (which are assumed to be UTF-8
      # HTML pages), 2-tuples `(response code, another string)`, and instances
      # of `dogeweb.response.Response`.
      200, 'Done sleeping.\n'


app.run '0.0.0.0' 8000
