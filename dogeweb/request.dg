import 'route'
import 'response'

import 'http'
import 'struct'
import 'websocket'


#: When a property is first accessed, cache the result of calling a function and return it.
#:
#: _mcache :: (object -> a) -> property a
#:
_mcache = func -> if
  func :: property => _mcache func.fget
  otherwise        =>
    name = func.__name__
    prop = ~> if
      name in @__dict__ => @__dict__ !! name
      otherwise         => @__dict__ !! name = func self
    prop.fget.__name__   = func.__name__
    prop.fget.__module__ = func.__module__
    prop.fget.__doc__    = func.__doc__
    prop


Request = subclass route.ContextAware websocket.ContextAware where
  #: Incoming request data.
  #:
  #: version  :: str      -- the HTTP version this request was made with.
  #: method   :: str      -- the HTTP request method (`GET`, `POST`, ...)
  #: path     :: str      -- the requested path relative to the current routing module.
  #: headers  :: Headers  -- additional HTTP headers as a dict-like object.
  #: payload  :: bytes    -- the request body.
  #: handler  :: Handler  -- the root handler of the application this request was received by.
  #: log      :: Logger
  #: reader   :: StreamReader
  #: writer   :: StreamWriter -- streams to use after HTTP Upgrade.
  #:
  __init__ = @handler @reader @writer @log @method path @version @headers @payload ~>
    @path, _, @query = path.partition '?'
    (super Request self).__init__!

  #: Values of various `Accept-*` HTTP headers as dict-like objects.
  #:
  #: accept :: { .mime :: Accept, .charset :: Accept, .language :: Accept, .encoding :: Accept }
  #:
  accept = _mcache $ ~>
    mime     = _mcache $ _ -> struct.AcceptMIME     $ http.accept $ @headers.get 'accept'
    charset  = _mcache $ _ -> struct.AcceptCharset  $ http.accept $ @headers.get 'accept-charset'
    language = _mcache $ _ -> struct.AcceptLanguage $ http.accept $ @headers.get 'accept-language'
    encoding = _mcache $ _ -> struct.AcceptEncoding $ http.accept $ @headers.get 'accept-encoding'
    (subclass object)!

  cookies = _mcache $ ~> dict $ http.cookies $ @headers.getall 'cookie'
  args    = _mcache $ ~> struct.MultiDict $ http.query @query
  form    = _mcache $ ~> struct.MultiDict $ http.body @payload @headers or list!
  files   = _mcache $ ~> struct.MultiDict $ filter ((k, v) -> v :: struct.File) @form.items!
  isxhr   = _mcache $ ~> (@headers.get 'x-requested-with' '').lower!.strip! == 'xmlhttprequest'
  isjson  = _mcache $ ~> @accept.mime !! 'application/json' > @accept.mime !! 'text/html'
  address = _mcache $ ~> @headers.get 'x-forwarded-for' or
    @writer.transport.get_extra_info 'peername' (None, None) !! 0

  # These do not require anything from the `Request`, but it's nice
  # to have `@redirect` instead of `dogeweb.response.redirect`, isn't it?
  abort    = staticmethod response.abort
  redirect = staticmethod response.redirect
  static   = staticmethod response.static
  jsonify  = staticmethod response.jsonify
