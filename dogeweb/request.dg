import 'route'
import 'response'

import 'http'
import 'struct'


#: A version of `property` that caches its result on first access.
#:
#: property :: (Either (object -> a) (builtins.property a)) -> builtins.property a
#:
property = func builtin_property: property ->
  name = func.__name__
  builtin_property $ route.wraps func $ self -> if
    name in @__dict__ => @__dict__ !! name
    otherwise         => @__dict__ !! name := func self


Request = subclass object where
  #: Incoming request data.
  #:
  #: app      :: Server   -- the instance of the application that handles this request.
  #: handler  :: Handler  -- the root handler of the application this request was received by.
  #: loop     :: EventLoop
  #: reader   :: StreamReader -- streams to use after HTTP Upgrade.
  #: writer   :: StreamWriter -- may not be available over HTTP 2.
  #: log      :: Logger
  #: method   :: str        -- the HTTP request method (`GET`, `POST`, ...)
  #: ishead   :: bool       -- whether this is actually `HEAD` (`method` is `GET` in that case)
  #: version  :: (int, int) -- the HTTP version this request was made with.
  #: path     :: str        -- the requested path relative to the current routing module.
  #: modpath  :: [str]      -- parts of `path` that reference parent modules.
  #: modroute :: [Handler]  -- exactly these modules.
  #: modname  :: [str]      -- names of these modules.
  #: query    :: str        -- the part of the path after `?`
  #: headers  :: Headers    -- additional HTTP headers as a dict-like object.
  #: payload  :: bytes      -- the request body.
  #:
  __init__ = @app @handler @loop @reader @writer @log @method path @version @headers @payload ~>
    @path, _, @query = path.partition '?'
    @ishead = @method == 'HEAD'
    @ishead => @method = 'GET'
    @modpath  = ['']
    @modroute = [@handler]
    @modname  = ['<root>']
    @@__init__!

  #: Values of various `Accept-*` HTTP headers as dict-like objects.
  #:
  #: accept :: { .mime :: Accept, .charset :: Accept, .language :: Accept, .encoding :: Accept }
  #:
  accept = property $ subclass object where
    __init__ = @_req ~>
    mime     = ~> struct.AcceptMIME     $ http.accept $ @_req.headers.get 'accept'
    charset  = ~> struct.AcceptCharset  $ http.accept $ @_req.headers.get 'accept-charset'
    language = ~> struct.AcceptLanguage $ http.accept $ @_req.headers.get 'accept-language'
    encoding = ~> struct.AcceptEncoding $ http.accept $ @_req.headers.get 'accept-encoding'

  #: The requested path relative to the domain, not the current module.
  #:
  #: fullpath :: str
  #:
  fullpath = ~> @parent + @path

  #: Path to the root of the current module.
  #:
  #: parent :: str
  #:
  parent = ~> ''.join @modpath

  #: Get the URL that points to a route with the given name. The syntax is
  #: the same as for Python imports: dot means a submodule, names that start
  #: with a dot are relative to the current module, any additional dots
  #: at the start refer to the parent modules.
  #:
  #: url_for :: str ** -> str
  #:
  url_for = (_:name) **: args ~>
    #        ^-- this trick with pattern-matching mangles the name of the parameter,
    #            making `url_for 'something' name: 'something_else'` valid.
    #           (As a reminder: an `x:y` pattern assigns the value to both `x` and `y`.)
    path = []
    name.startswith '.' => path = list $ zip @modpath @modroute @modname
    name.endswith   '.' => raise $ ValueError 'no endpoint name given'
    # If this is a relative name, this will be popped off on the first iteration.
    # If not, the root module is the one we want to start from anyway.
    path.append $ head $ zip @modpath @modroute @modname

    for part in name.split '.' => if
      not path => raise $ ValueError 'relative name out of bounds'
      not part => path.pop -1
      otherwise =>
        _, fn, m = last path
        except err => path.append (fn.routes !! part !! 0, fn.routes !! part !! 1, part)
               err :: AttributeError => raise $ TypeError  $ '{!r} is not a module'.format m
               err :: KeyError       => raise $ ValueError $ '{!r} does not exist'.format part

    route.concrete args $ ''.join $ map fst path

  #: A `dict`-like object that contains HTTP cookies.
  #:
  #: cookies :: struct.Cookies
  #:
  cookies = ~> struct.Cookies self $ http.cookies $ @headers.getall 'cookie'

  #: Parameters passed in the URL (as `?name=value&name=value&...`)
  #:
  #: args :: struct.MultiDict str str
  #:
  args = ~> struct.MultiDict $ http.query @query

  #: Parameters passed in the request body.
  #:
  #: form :: struct.MultiDict str object
  #:
  form = ~> struct.MultiDict $ http.body @payload @headers or []

  #: Same as `form`, but only contains files.
  #:
  #: files :: struct.MultiDict str struct.File
  #:
  files = ~> struct.MultiDict $ filter ((k, v) -> v :: struct.File) @form.items!

  #: Whether this request was made by a client-side script (XMLHttpRequest).
  #:
  #: isxhr :: bool
  #:
  isxhr = ~> (@headers.get 'x-requested-with' '').lower!.strip! == 'xmlhttprequest'

  #: Whether this request would prefer data as JSON (useful for builting APIs).
  #:
  #: isjson :: bool
  #:
  isjson = ~> @accept.mime !! 'application/json' > @accept.mime !! 'text/html'

  #: IP/UNIX/whatever address of the client.
  #:
  #: address :: Maybe str
  address = ~> @headers.get 'x-forwarded-for' or
    @writer.transport.get_extra_info 'peername' (None, None) !! 0

  # These do not require anything from the `Request`, but it's nice
  # to have `@redirect` instead of `dogeweb.response.redirect`, isn't it?
  abort    = staticmethod response.abort
  redirect = staticmethod response.redirect
  static   = staticmethod response.static
  jsonify  = staticmethod response.jsonify
