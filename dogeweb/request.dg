import 'route'
import 'response'

import 'http'
import 'struct'


#: When a property is first accessed, cache the result of calling a function and return it.
#:
#: _mcache :: (object -> a) -> property a
#:
_mcache = func -> if
  func :: property => _mcache func.fget
  otherwise        =>
    name = func.__name__
    prop = ~> if
      name in @__dict__ => @__dict__ !! name
      otherwise         => @__dict__ !! name = func self
    prop.fget.__name__   = func.__name__
    prop.fget.__module__ = func.__module__
    prop.fget.__doc__    = func.__doc__
    prop


Request = subclass route.ContextAware response.ContextAware where
  #: Incoming request data.
  #:
  #: version  :: str      -- the HTTP version this request was made with.
  #: method   :: str      -- the HTTP request method (`GET`, `POST`, ...)
  #: path     :: str      -- the requested path relative to the current routing module.
  #: headers  :: Headers  -- additional HTTP headers as a dict-like object.
  #: payload  :: bytes    -- the request body.
  #: protocol :: Protocol -- the asyncio HTTP protocol that received the response.
  #: handler  :: Handler  -- the root handler of the application this request was received by.
  #:
  __init__ = raw @payload @protocol @handler ~>
    @version     = raw.version
    @method      = raw.method
    @path        = raw.path
    @headers     = struct.Headers raw.headers
    @compression = raw.compression
    @shouldclose = raw.should_close
    (super Request self).__init__!

  #: Values of various `Accept-*` HTTP headers as dict-like objects.
  #:
  #: accept :: { .mime :: Accept, .charset :: Accept, .language :: Accept, .encoding :: Accept }
  #:
  accept = _mcache $ ~>
    mime     = _mcache $ _ -> struct.AcceptMIME     $ http.parse_accept $ @headers.get 'accept'
    charset  = _mcache $ _ -> struct.AcceptCharset  $ http.parse_accept $ @headers.get 'accept-charset'
    language = _mcache $ _ -> struct.AcceptLanguage $ http.parse_accept $ @headers.get 'accept-language'
    encoding = _mcache $ _ -> struct.AcceptEncoding $ http.parse_accept $ @headers.get 'accept-encoding'
    (subclass object)!

  cookies  = _mcache $ ~> dict $ http.parse_cookies $ @headers.getall 'cookie'
  encoding = _mcache $ ~> raise NotImplementedError
  form     = _mcache $ ~> raise NotImplementedError
  args     = _mcache $ ~> raise NotImplementedError
  files    = _mcache $ ~> raise NotImplementedError
