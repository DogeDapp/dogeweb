import '/os'
import '/json'
import '/asyncio'
import '/mimetypes'

import 'http'
import 'struct'


Abort = subclass Exception where
  #: The exception raised on HTTP errors.
  #:
  #: code        :: int -- which error.
  #: description :: str -- why.
  #: headers     :: struct.Headers -- these should be included in whatever the server
  #:                               -- decides to send to the client.
  #:
  __init__ = @code @description: '' @headers: () ~>
    @headers = struct.Headers @headers
    @@__init__ @description

  #: Standardized name assigned to this error code (e.g. 400 == Bad Request).
  #:
  #: name :: str
  #:
  name = ~> http.responses.get @code 'Unknown Error'


Response = subclass object where
  __init__ = code headers data ~>
    @code    = code
    @headers = headers
    @data    = list' data
    @headers = struct.Headers @defheaders
    @headers.replace headers
    None

  #: Headers that will be sent unless overriden when constructing a response.
  #:
  #: defheaders :: { convertable to struct.Headers }
  #:
  defheaders = ~> list'
    'Content-Type',   'text/html; charset=utf-8'
    'Content-Length', str $ sum $ map len @data
    # NOTE this should be replaced with `'Transfer-Encoding', 'chunked'` if
    #      content-length could not be calculated.

  #: Talk to the client in some other protocol, if applicable.
  #: Called after the response (probably 101 Continue) is sent.
  #:
  #: communicate :: StreamReader StreamWriter -> coroutine a
  #:
  communicate = asyncio.coroutine $ reader writer ~> None


JSONResponse = subclass Response where
  #: Headers that will be sent unless overriden when constructing a response.
  #:
  #: defheaders :: { convertable to struct.Headers }
  #:
  defheaders = ~> list'
    'Content-Type',  'application/json; charset=utf-8'
    'Cache-Control', 'no-cache, no-store, must-revalidate'
    'Content-Length', str $ sum $ map len @data


FileResponse = subclass Response where
  #: A `Response` that sends data from a file.
  #:
  #: path    :: str -- the file to read from.
  #: bufsize :: int -- how much data to read every syscall.
  #:
  __init__ = code path headers bufsize: 65536 ~>
    @path    = path
    @bufsize = bufsize
    @@__init__ code headers b''

  #: IO-specific headers. `Content-Length` is determined via `stat`.
  #:
  #: defheaders :: dict str str
  #:
  defheaders = ~> list'
    except err => 'Content-Length', str (os.stat @path).st_size
           err :: OSError => abort 404
    'Content-Type', fst (mimetypes.guess_type @path strict: False) or 'application/octet-stream'

  #: The contents of a file object.
  #:
  #: data :: iter bytes
  #:
  data = property
    self   -> with fd = open @path 'rb' => while (b = fd.read @bufsize) => yield b
    self _ -> # Ignore `@data = ...` from `Response.__init__`.


#: Stop the handler, return an error message.
#:
#: abort :: int (Optional str) (Optional (dict str str)) -> a
#:
abort = code info: '' headers: () -> raise $ Abort code info headers


#: Issue a 303 See Other. The client is redirected to a new URL.
#:
#: redirect :: str (Optional str) (Optional int) (Optional (dict str str)) -> a
#:
redirect = path info: '' code: 303 headers: () ->
  exc = Abort code info headers
  exc.headers !! 'location' = path
  raise exc


#: Convert an arbitrary object into a response.
#:
#: Currently supported are strings and bytes (simple HTML responses in UTF-8), actual
#: `Response`s, and `(code, [headers,] responsifyable)` tuples, as well as coroutines
#: that return them.
#:
#: responsify :: object -> coroutine Response
#:
responsify = async $ r -> if
  r :: Response => r
  r :: bytes    => Response 200 () r
  r :: str      => Response 200 () $ r.encode 'utf-8'
  r :: tuple    =>
    code, *headers, r = r
    r = await responsify r
    r.code = code
    exhaust $ map r.headers.replace headers
    r
  otherwise => await responsify $ await r


#: Create a json response. Unlike `json.dumps`, this specifies proper `Content-Type`.
#:
#: jsonify :: object -> Response
#:
jsonify = ob code: 200 headers: () -> JSONResponse code headers $ (json.dumps ob).encode 'utf-8'


#: Serve a single static file.
#:
#: static :: str (Optional bool) (Optional (dict str str)) -> Response
#:
static = path attachment: True headers: () ->
  r = FileResponse 200 path headers
  # TODO specify `filename`.
  attachment => r.headers.setdefault 'Content-Disposition' 'attachment'
  r
