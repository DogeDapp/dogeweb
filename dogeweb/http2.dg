import '/os'
import '/socket'
import '/asyncio'
import '/asyncio/CancelledError'

import '/h2py'

import 'request'
import 'struct'
import 'util'


Request2 = subclass request.Request where
  #: Incoming request data, version 2.0. These fields have been made inaccessible::
  #:
  #: reader   :: undefined -- aborts the request on access
  #: writer   :: undefined -- one cannot use the underlying streams for other purposes.
  #:
  reader = property
    self   -> @abort 505 'Not available over HTTP/2'
    self v ->

  writer = property
    self   -> @abort 505 'Not available over HTTP/2'
    self v ->

  #: Push a resource that the client hasn't asked for yet.
  #:
  #: push :: * ** -> undefined -- not implemented
  #:
  push = *: _ **: _ ~> raise NotImplementedError


#: ???
#:
#: run :: typeof asyncio.create_server -> coroutine AbstractServer
#:
run = host: '' port: 0 family: socket.AF_INET sock: [] backlog: 100 ssl: None loop: None ~>
  port != 0 =>
    sock != [] => raise $ TypeError 'either `sock` or `host`+`port`, not both'
    fd = socket.socket family
    fd.bind (host, port)
    sock = [fd,]

  onrequest = io loop: None -> except
    err =>
      req = Request2 self @handler loop None None @log
        io.method
        io.path
        io.version
        io.headers |> struct.Headers
        io.payload

      resp = yield from $ @respond req
      io.respond resp.code
            list resp.headers.items!
            if req.ishead => b''
               otherwise  => b''.join resp.data
    err :: CancelledError       => raise err
    err :: ConnectionError      =>
    err :: ConnectionResetError =>
    err :: Exception => @log.fatal 'error in http handler' exc_info: True, raise CancelledError

  h2py.Server sock onrequest loop ssl backlog
